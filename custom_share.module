<?php
/**
 * Implements hook_menu().
 */
function custom_share_menu() {
	$items['admin/config/system/custom_share'] = array(
		'title' => 'Custom Share',
		'description' => 'Configure settings custom share links',
		'page callback' => 'drupal_get_form',
		'page arguments'   => array('custom_share_settings_form'),
		'access arguments' => array('administer site configuration'),
	);
  	return $items;
}

/**
 * Implementation of hook_form_FORM_ID().
 */
function custom_share_settings_form() {
	$form['custom_share_links'] = array(
	    '#type'          => 'checkboxes',
	    '#title'         => t('Share Links'),
	    '#description'   => t('Display links for these social networks.'),
	    '#default_value' => variable_get('custom_share_links', array()),
	    '#options'       => array('facebook' => 'Facebook', 'twitter' => 'Twitter', 'google' => 'Google', 'linked_in' => 'LinkedIn', 'xing' => 'Xing', 'email' => 'E-Mail'),
  	);
	$form['custom_share_nodetypes'] = array(
		'#type'          => 'checkboxes',
		'#title'         => t('Node types'),
		'#description'   => t('Display links for these node types.'),
		'#default_value' => variable_get('custom_share_nodetypes', array()),
		'#options'       => node_type_get_names(),
	);
	$form['custom_share_viewmodes'] = array(
		'#type'          => 'checkboxes',
		'#title'         => t('View modes'),
		'#description'   => t('Display links for these view modes.'),
		'#default_value' => variable_get('custom_share_viewmodes', array()),
		'#options'       => _custom_share_view_modes(),
	);
  	return system_settings_form($form);
}

/**
 * Implementation of hook_node_view().
 */
function custom_share_node_view($node, $view_mode) {
  if($render_array = _custom_share_get_links_render_array($node, $view_mode)) {
    $node->content['links']['custom_share'] = $render_array;
  }
}


/**
 * Implements hook_block_info().
 */
function custom_share_block_info() {
  $blocks['custom_share_links_block'] = array(
    'info' => 'Custom Share Links',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function custom_share_block_view($delta = '') {
  switch ($delta) {
    case 'custom_share_links_block':
      $block['content'] = '';
      if ($node = menu_get_object()) {
        $links = _custom_share_get_links_render_array($node, array(), TRUE);
        $block['content'] = render($links);
      }
      break;
  }
  return $block;
}

// Helper function to create links
function custom_share_links($node) {
	$url = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => true));

	$facebook_share_url = 'http://www.facebook.com/sharer/sharer.php?u=' . $url;
	$twitter_share_url = 'http://twitter.com/intent/tweet?text=' . $node->title . ' ' . $url;
	$google_share_url = 'https://plus.google.com/share?url=' . $url;
	$linked_in_share_url = 'http://www.linkedin.com/shareArticle?mini=true&url=' . $url;
	$xing_share_url = 'https://www.xing.com/app/user?op=share;url=' . $url;
	$email_share_url = 'mailto:?subject=' . $node->title . '&body=' . $url;

	$links = array(
		'facebook' => array('title' => 'Facebook', 'href' => $facebook_share_url, 'attributes' => array('target' => '_blank'),),
		'twitter' => array('title' => 'Twitter', 'href' => $twitter_share_url, 'attributes' => array('target' => '_blank'),),
		'google' => array('title' => 'Google', 'href' => $google_share_url, 'attributes' => array('target' => '_blank'),),
		'linked_in' => array('title' => 'LinkedIn', 'href' => $linked_in_share_url, 'attributes' => array('target' => '_blank'),),
		'xing' => array('title' => 'Xing', 'href' => $xing_share_url, 'attributes' => array('target' => '_blank'),),
		'email' => array('title' => 'Email', 'href' => $email_share_url, 'attributes' => array('target' => '_blank'),)
		);
	return $links;
}


// Helper function to render links
function _custom_share_get_links_render_array($node, $view_mode = array(), $is_block = FALSE)  {
  $node_types = variable_get('custom_share_nodetypes', array());
  $link_types = variable_get('custom_share_links', array());
  $view_modes = variable_get('custom_share_viewmodes', array());
  $share_links = custom_share_links($node);

  foreach ($share_links as $key => $value) {
    if(isset($link_types[$key]) && !is_numeric($link_types[$key])) {
      $links_array[$key] = $share_links[$key];
    }
  }
  // Check if Links should be displayed
  $show = (!empty($node->type)
    && in_array($node->type, $node_types, TRUE)
    && ($node->status == 1)
    && isset($links_array)
    && (in_array($view_mode, $view_modes, TRUE) || $is_block));
  if ($show) {
    $render_array = array(
      '#theme' => 'links',
      '#links' => $links_array,
      '#attributes' => array('class' => array('links', 'inline')),
    );
    return $render_array;
  }

  return array();
}

/**
 * Helper function to build select list options for view modes
 * @return array $view_modes machine name => label of all available view modes
 */
function _custom_share_view_modes() {

	$entity_info = entity_get_info('node');
	$view_modes = array();

	foreach ($entity_info['view modes'] as $machine_name => $property) {

    // skip rss, search_index, search_result and token
    if (in_array($machine_name, array('rss', 'search_index', 'search_result', 'token'))) { continue; }

		$view_modes[$machine_name] = $property['label'];
	}
	return $view_modes;
}
